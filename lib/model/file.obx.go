// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package model

import (
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type file_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var FileBinding = file_EntityInfo{
	Entity: objectbox.Entity{
		Id: 1,
	},
	Uid: 7213647096405042608,
}

// File_ contains type-based Property helpers to facilitate some common operations such as Queries.
var File_ = struct {
	Id          *objectbox.PropertyUint64
	Video       *objectbox.RelationToOne
	Quality     *objectbox.PropertyString
	Type        *objectbox.PropertyString
	Width       *objectbox.PropertyInt
	Height      *objectbox.PropertyInt
	Link        *objectbox.PropertyString
	CreatedTime *objectbox.PropertyInt64
	FPS         *objectbox.PropertyFloat32
	Size        *objectbox.PropertyInt
	MD5         *objectbox.PropertyString
	FileID      *objectbox.PropertyString
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &FileBinding.Entity,
		},
	},
	Video: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     2,
			Entity: &FileBinding.Entity,
		},
		Target: &VideoBinding.Entity,
	},
	Quality: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &FileBinding.Entity,
		},
	},
	Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &FileBinding.Entity,
		},
	},
	Width: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &FileBinding.Entity,
		},
	},
	Height: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &FileBinding.Entity,
		},
	},
	Link: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &FileBinding.Entity,
		},
	},
	CreatedTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &FileBinding.Entity,
		},
	},
	FPS: &objectbox.PropertyFloat32{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &FileBinding.Entity,
		},
	},
	Size: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &FileBinding.Entity,
		},
	},
	MD5: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &FileBinding.Entity,
		},
	},
	FileID: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &FileBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (file_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (file_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("File", 1, 7213647096405042608)
	model.Property("Id", 6, 1, 6109961741584807097)
	model.PropertyFlags(1)
	model.Property("Video", 11, 2, 5423207651351721255)
	model.PropertyFlags(520)
	model.PropertyRelation("Video", 1, 5328155144571166569)
	model.Property("Quality", 9, 3, 33301726147589279)
	model.Property("Type", 9, 4, 3912510695361366141)
	model.Property("Width", 6, 5, 9103487774975810663)
	model.Property("Height", 6, 6, 558039885322707643)
	model.Property("Link", 9, 7, 138939902729106351)
	model.Property("CreatedTime", 10, 8, 5946832145443102685)
	model.Property("FPS", 7, 9, 7501548141467613274)
	model.Property("Size", 6, 10, 3039054294949786231)
	model.Property("MD5", 9, 11, 7180297607562117409)
	model.Property("FileID", 9, 12, 5924064810708718015)
	model.PropertyFlags(2080)
	model.PropertyIndex(3, 3653660175223000838)
	model.EntityLastPropertyId(12, 5924064810708718015)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (file_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*File).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (file_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*File).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (file_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	if rel := object.(*File).Video; rel != nil {
		if rId, err := VideoBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForVideo(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (file_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*File)
	var propCreatedTime int64
	{
		var err error
		propCreatedTime, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.CreatedTime)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on File.CreatedTime: " + err.Error())
		}
	}

	var offsetQuality = fbutils.CreateStringOffset(fbb, obj.Quality)
	var offsetType = fbutils.CreateStringOffset(fbb, obj.Type)
	var offsetLink = fbutils.CreateStringOffset(fbb, obj.Link)
	var offsetMD5 = fbutils.CreateStringOffset(fbb, obj.MD5)
	var offsetFileID = fbutils.CreateStringOffset(fbb, obj.FileID)

	var rIdVideo uint64
	if rel := obj.Video; rel != nil {
		if rId, err := VideoBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdVideo = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(12)
	fbutils.SetUint64Slot(fbb, 0, id)
	if obj.Video != nil {
		fbutils.SetUint64Slot(fbb, 1, rIdVideo)
	}
	fbutils.SetUOffsetTSlot(fbb, 11, offsetFileID)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetQuality)
	fbutils.SetUOffsetTSlot(fbb, 3, offsetType)
	fbutils.SetInt64Slot(fbb, 4, int64(obj.Width))
	fbutils.SetInt64Slot(fbb, 5, int64(obj.Height))
	fbutils.SetUOffsetTSlot(fbb, 6, offsetLink)
	fbutils.SetInt64Slot(fbb, 7, propCreatedTime)
	fbutils.SetFloat32Slot(fbb, 8, obj.FPS)
	fbutils.SetInt64Slot(fbb, 9, int64(obj.Size))
	fbutils.SetUOffsetTSlot(fbb, 10, offsetMD5)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (file_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'File' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	propCreatedTime, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 18))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on File.CreatedTime: " + err.Error())
	}

	var relVideo *Video
	if rId := fbutils.GetUint64PtrSlot(table, 6); rId != nil && *rId > 0 {
		if rObject, err := BoxForVideo(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relVideo = rObject
		}
	}

	return &File{
		Id:          propId,
		Video:       relVideo,
		FileID:      fbutils.GetStringSlot(table, 26),
		Quality:     fbutils.GetStringSlot(table, 8),
		Type:        fbutils.GetStringSlot(table, 10),
		Width:       fbutils.GetIntSlot(table, 12),
		Height:      fbutils.GetIntSlot(table, 14),
		Link:        fbutils.GetStringSlot(table, 16),
		CreatedTime: propCreatedTime,
		FPS:         fbutils.GetFloat32Slot(table, 20),
		Size:        fbutils.GetIntSlot(table, 22),
		MD5:         fbutils.GetStringSlot(table, 24),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (file_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*File, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (file_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*File), nil)
	}
	return append(slice.([]*File), object.(*File))
}

// Box provides CRUD access to File objects
type FileBox struct {
	*objectbox.Box
}

// BoxForFile opens a box of File objects
func BoxForFile(ob *objectbox.ObjectBox) *FileBox {
	return &FileBox{
		Box: ob.InternalBox(1),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the File.Id property on the passed object will be assigned the new ID as well.
func (box *FileBox) Put(object *File) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the File.Id property on the passed object will be assigned the new ID as well.
func (box *FileBox) Insert(object *File) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *FileBox) Update(object *File) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *FileBox) PutAsync(object *File) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the File.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the File.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *FileBox) PutMany(objects []*File) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *FileBox) Get(id uint64) (*File, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*File), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *FileBox) GetMany(ids ...uint64) ([]*File, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*File), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *FileBox) GetManyExisting(ids ...uint64) ([]*File, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*File), nil
}

// GetAll reads all stored objects
func (box *FileBox) GetAll() ([]*File, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*File), nil
}

// Remove deletes a single object
func (box *FileBox) Remove(object *File) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *FileBox) RemoveMany(objects ...*File) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the File_ struct to create conditions.
// Keep the *FileQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *FileBox) Query(conditions ...objectbox.Condition) *FileQuery {
	return &FileQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the File_ struct to create conditions.
// Keep the *FileQuery if you intend to execute the query multiple times.
func (box *FileBox) QueryOrError(conditions ...objectbox.Condition) (*FileQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &FileQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See FileAsyncBox for more information.
func (box *FileBox) Async() *FileAsyncBox {
	return &FileAsyncBox{AsyncBox: box.Box.Async()}
}

// FileAsyncBox provides asynchronous operations on File objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type FileAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForFile creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use FileBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForFile(ob *objectbox.ObjectBox, timeoutMs uint64) *FileAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 1, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 1: %s" + err.Error())
	}
	return &FileAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *FileAsyncBox) Put(object *File) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *FileAsyncBox) Insert(object *File) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *FileAsyncBox) Update(object *File) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *FileAsyncBox) Remove(object *File) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all File which Id is either 42 or 47:
//
//	box.Query(File_.Id.In(42, 47)).Find()
type FileQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *FileQuery) Find() ([]*File, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*File), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *FileQuery) Offset(offset uint64) *FileQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *FileQuery) Limit(limit uint64) *FileQuery {
	query.Query.Limit(limit)
	return query
}
